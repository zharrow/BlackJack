// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isGuest   Boolean  @default(false)
  
  // Relations
  profile   Profile?
  stats     Stats?
  sessions  Session[]
}

model Profile {
  id           String   @id @default(uuid())
  userId       String   @unique
  avatarUrl    String?
  theme        String   @default("dark")
  tableColor   String   @default("green")
  cardStyle    String   @default("classic")
  soundEnabled Boolean  @default(true)
  musicEnabled Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Stats {
  id             String   @id @default(uuid())
  userId         String   @unique
  gamesPlayed    Int      @default(0)
  gamesWon       Int      @default(0)
  gamesLost      Int      @default(0)
  gamesTied      Int      @default(0)
  blackjacks     Int      @default(0)
  busts          Int      @default(0)
  longestStreak  Int      @default(0)
  currentStreak  Int      @default(0)
  totalEarnings  Int      @default(0)
  highestWin     Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  gameHistory    GameRecord[]
}

model GameRecord {
  id            String   @id @default(uuid())
  statsId       String
  result        String   // "win", "loss", "tie", "blackjack", "bust"
  playerScore   Int
  dealerScore   Int
  createdAt     DateTime @default(now())
  
  // Relations
  stats         Stats    @relation(fields: [statsId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}